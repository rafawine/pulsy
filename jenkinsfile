pipeline {
    agent any

    environment {
        GIN_MODE = credentials('gin-mode')
        PORT = credentials('back-port')
        TYPE = credentials('fb-type') 
        PROJECT_ID = credentials('fb-project-id')
        PRIVATE_KEY_ID = credentials('fb-private-key-id')
        PRIVATE_KEY = credentials('fb-private-key')
        CLIENT_EMAIL = credentials('fb-client-email')
        CLIENT_ID = credentials('fb-client-id')
        AUTH_URI = credentials('fb-auth-uri')
        TOKEN_URI = credentials('fb-token-uri')
        AUTH_PROVIDER_CERT_URL = credentials('fb-auth-provider')
        CLIENT_CERT_URL = credentials('fb-client-cert')
        UNIVERSE_DOMAIN = credentials('fb-domain')
        BUCKET = credentials('fb-bucket')
    }

    stages {
        stage("Generate .env file") {
            steps {
                sh '''
                cat <<EOF > .env
                GIN_MODE=${GIN_MODE}
                PORT=${PORT}
                TYPE=${TYPE}
                PROJECT_ID=${PROJECT_ID}
                PRIVATE_KEY_ID=${PRIVATE_KEY_ID}
                PRIVATE_KEY="${PRIVATE_KEY}"
                CLIENT_EMAIL=${CLIENT_EMAIL}
                CLIENT_ID=${CLIENT_ID}
                AUTH_URI=${AUTH_URI}
                TOKEN_URI=${TOKEN_URI}
                AUTH_PROVIDER_CERT_URL=${AUTH_PROVIDER_CERT_URL}
                CLIENT_CERT_URL=${CLIENT_CERT_URL}
                UNIVERSE_DOMAIN=${UNIVERSE_DOMAIN}
                BUCKET=${BUCKET}
                EOF
                '''
            }
        }

        stage("Build & Run Docker Compose") {
            steps {
                sh 'docker compose down'
                sh 'docker compose up -d --build'
            }
        }

        stage("Remove Hanging Images") {
            steps {
                sh 'docker image prune -f'
            }
        }
    }
}
